#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

 
using System;

public record CustomerId(string Value): NonEmptyString(Value)
{
    public static implicit operator CustomerId(string d) => new CustomerId(d);
}

string t = "boom!";

CustomerId f = t;
Console.WriteLine(f);  // output: boom!

public record NonEmptyString
{
    public readonly string Value;

    public NonEmptyString(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            throw new ArgumentOutOfRangeException(nameof(Value), "Digit cannot be greater than nine.");
        }
        this.Value = value;
    }

    public static implicit operator NonEmptyString(string d) => new NonEmptyString(d);
    public static implicit operator string(NonEmptyString d) => d.Value;
    //public static explicit operator NonEmptyString(string b) => new NonEmptyString(b);

    public override string ToString() => $"{Value}";
}

public record Digit
{
    private readonly NonEmptyString digit;

    public Digit(NonEmptyString digit)
    {
        if (string.IsNullOrWhiteSpace(digit.Value))
        {
            throw new ArgumentOutOfRangeException(nameof(digit), "Digit cannot be greater than nine.");
        }
        
        this.digit = digit;
    }

    public static implicit operator NonEmptyString(Digit d) => d.digit;
    public static explicit operator Digit(NonEmptyString b) => new Digit(b);

    public override string ToString() => $"{digit}";
}

var d = new Digit(new NonEmptyString("7"));

NonEmptyString z = t; //string to nonempty string with out constructing explicitly

NonEmptyString number = d;
Console.WriteLine(number);  // output: 7

Digit digit = (Digit)number;
Console.WriteLine(digit);  // output: 7

#!csharp

#nullable enable
using System.Linq.Expressions;

public interface ICommand {

    CausationId CausationId { get; } 
    
    CorrelationId CorrelationId { get; }
}

public abstract record PartitionKey(string Value);

public sealed record CausationId(string Value);

public sealed record CorrelationId(string Value);

public abstract record Command(CausationId CausationId, CorrelationId CorrelationId);

public interface IAggregate {}

public sealed record MobileNumber(string Value);

public abstract record ExternalId(string Value);

public abstract record Provider(string Value);

public sealed record FirebaseProvider(): Provider("Firebase");

public sealed record UnknownExternalId(): ExternalId("Unknow"); 

public abstract record Id (string Value);

public sealed record UserPartitionKey(MobileNumber MobileNumber): PartitionKey(MobileNumber.Value);

public sealed record UserId(MobileNumber MobileNumber): Id(MobileNumber.Value);

public sealed record NullInstanceAggregate : IAggregate;

public sealed record DeviceId(string Value);

public sealed record VerificationId(string Value);

public sealed record VerficationCode(string value);

public sealed record UserAggregate(
    ExternalId ExternalId,
    Provider Provider,
    MobileNumber MobileNumber, 
    bool IsLinked, 
    DateTime LastSignInRequested,
    DateTime LastSuccessfulSignIn,
    int SignInAttempts,
    DateTime LastFailedSignInAttempt,
    int FailedSignInAttempts,
    bool Disabled,
    bool Locked
) : IAggregate;

public interface IEvent<TAggregate> where TAggregate: IAggregate  {
    TAggregate Apply(TAggregate aggregate);
}

public interface ICreatedEvent<TAggregate> where TAggregate: IAggregate 
{
    TAggregate Apply();
}

public interface IEventStore<TAggregate> where TAggregate : IAggregate 
{
    Task SaveAsync(IAggregate aggregate, IEnumerable<IEvent<TAggregate>> events);
}

public interface ICommandHandler<TCommand> where TCommand: ICommand
{
    Task HandleAsync(TCommand command);
}

public interface ICommandHandler<TCommand, TResponse> 
    where TCommand: ICommand
    where TResponse: class
{
    Task<TResponse> HandleAsync(TCommand command);
}

public interface IEventStore<TAggregate, TPartitionKey, TId> 
where TAggregate : IAggregate 
where TPartitionKey : PartitionKey
where TId : Id
{
    Task<TAggregate> GetAsync(TPartitionKey partitionKey, TId Id);

    Task<IEnumerable<TAggregate>> GetAsync(TPartitionKey partitionKey);

    Task SaveAsync(ICreatedEvent<TAggregate> created, IEnumerable<IEvent<TAggregate>> events);

    Task SaveAsync(TAggregate aggregate, IEnumerable<IEvent<TAggregate>> events);
}

public class UserService : IEventStore<UserAggregate, UserPartitionKey, UserId>
{
    private readonly IEventStore<UserAggregate> _eventStore;

    protected UserService(IEventStore<UserAggregate> eventStore)
    {
        _eventStore = eventStore;
    }
    
    public Task<UserAggregate> GetAsync(UserPartitionKey partitionKey, UserId Id)
    {
        // Get from DB
        var aggregate = new UserAggregate(
            new UnknownExternalId(),
            new FirebaseProvider(),
            new MobileNumber("+61"), 
            false, 
            DateTime.UtcNow.AddDays(-10),
            DateTime.MinValue,
            0,
            DateTime.MinValue,
            0,
            false,
            false);

        return Task.FromResult<UserAggregate>(aggregate);
    }

    public Task<IEnumerable<UserAggregate>> GetAsync(UserPartitionKey partitionKey)
    {
        return Task.FromResult<IEnumerable<UserAggregate>>(Enumerable.Empty<UserAggregate>());
    }

    public async Task SaveAsync(UserAggregate aggregate, IEnumerable<IEvent<UserAggregate>> events)
    {
        events.Aggregate(aggregate, (aggregate, @event) => @event.Apply(aggregate));   

        await _eventStore.SaveAsync(aggregate, events);
    }

    public async Task SaveAsync(ICreatedEvent<UserAggregate> created, IEnumerable<IEvent<UserAggregate>> events)
    {
        UserAggregate aggregate = created.Apply();
        events.Aggregate(aggregate, (aggregate, @event) => @event.Apply(aggregate));

        await _eventStore.SaveAsync(aggregate, events);
    }

}

public sealed record UserCreatedEvent(MobileNumber MobileNumber) : ICreatedEvent<UserAggregate>
{
    public UserAggregate Apply()
    {
        return new UserAggregate(
            new UnknownExternalId(),
            new FirebaseProvider(),
            MobileNumber, 
            false, 
            DateTime.MinValue,
            DateTime.MinValue,
            0,
            DateTime.MinValue,
            0,
            false,
            false);
    }
}

public sealed record UserLinkedEvent() : IEvent<UserAggregate>
{
    public UserAggregate Apply(UserAggregate aggregate)
    {
        return aggregate with { IsLinked = true };
    }
}

public sealed record MobileNumberChangedEvent(MobileNumber MobileNumber) : IEvent<UserAggregate>
{
    public UserAggregate Apply(UserAggregate aggregate)
    {
        return aggregate with { MobileNumber = MobileNumber };
    }
}

public sealed record SignUpUserCommand(CausationId CausationId, CorrelationId CorrelationId, MobileNumber MobileNumber) 
    : Command (CausationId, CorrelationId), ICommand;

public sealed class SignUpUserCommandHandler : ICommandHandler<SignUpUserCommand>
{
    private readonly IEventStore<UserAggregate, UserPartitionKey, UserId> _eventStore;

    public SignUpUserCommandHandler(IEventStore<UserAggregate, UserPartitionKey, UserId> eventStore)
    {
        _eventStore = eventStore;
    }

    public async Task HandleAsync(SignUpUserCommand command)
    {
        UserPartitionKey partitionKey = new(command.MobileNumber);
        UserId userId = new (command.MobileNumber);

        IAggregate aggregate = await _eventStore.GetAsync(partitionKey, userId);
        
        switch(aggregate)
        {
            case NullInstanceAggregate:
                Console.WriteLine("Null Instance");
                break;
            case UserAggregate user:
                await _eventStore.SaveAsync(new UserCreatedEvent(command.MobileNumber), new [] {
                    new UserLinkedEvent()
                });
                break;
            default:
                throw new InvalidOperationException();
        };
    }
}

public sealed record SignInUserCommand(CausationId CausationId, CorrelationId CorrelationId, MobileNumber MobileNumber, DeviceId DeviceId) 
    : Command (CausationId, CorrelationId), ICommand;

public sealed record UserSignedInRequestedEvent(DateTime SignInRequestedUtc, DeviceId DeviceId) : IEvent<UserAggregate>
{
    public UserAggregate Apply(UserAggregate aggregate)
    {
        return aggregate with { LastSignInRequested = SignInRequestedUtc };
    }
}

public sealed class SignInCommandHandler : ICommandHandler<SignInUserCommand>
{
    private readonly IEventStore<UserAggregate, UserPartitionKey, UserId> _eventStore;

    public SignInCommandHandler(
        IEventStore<UserAggregate, UserPartitionKey, UserId> eventStore)
    {
        _eventStore = eventStore;
    }

    public async Task HandleAsync(SignInUserCommand command)
    {
        UserPartitionKey partitionKey = new(command.MobileNumber);
        UserId userId = new (command.MobileNumber);

        IAggregate aggregate = await _eventStore.GetAsync(partitionKey, userId);

        switch(aggregate)
        {
            case UserAggregate userAggregate:
                await _eventStore.SaveAsync(userAggregate, new [] {
                    new UserSignedInRequestedEvent(DateTime.UtcNow, command.DeviceId)
                });
                break;
            default:
                throw new InvalidOperationException();
        }
    }
}

public sealed record VerifySignInCommand(
    CausationId CausationId, 
    CorrelationId CorrelationId, 
    MobileNumber MobileNumber, 
    VerificationId VerificationId, 
    DeviceId DeviceId,
    VerficationCode VerificationCode) 
    : Command (CausationId, CorrelationId), ICommand;

public sealed record VerifySignInRequestedEvent(DeviceId DeviceId, VerificationId VerificationId) : IEvent<UserAggregate>
{
    public UserAggregate Apply(UserAggregate aggregate)
    {
        return aggregate;
    }
}

public sealed record SuccessfulSignInEvent(DeviceId DeviceId, VerificationId VerificationId, DateTime AttemptDateTimeUtc) : IEvent<UserAggregate>
{
    public UserAggregate Apply(UserAggregate aggregate)
    {
        return aggregate with { 
            FailedSignInAttempts = 0, 
            LastFailedSignInAttempt = DateTime.MinValue, 
            SignInAttempts = 0,
            LastSuccessfulSignIn =  AttemptDateTimeUtc
        };
    }
}

public sealed record FailedSignInEvent(DeviceId DeviceId, VerificationId VerificationId, DateTime AttemptDateTimeUtc) : IEvent<UserAggregate>
{
    public UserAggregate Apply(UserAggregate aggregate)
    {
        return aggregate with {  FailedSignInAttempts = aggregate.FailedSignInAttempts+1, LastFailedSignInAttempt = AttemptDateTimeUtc };
    }
}

public sealed record UserLockedEvent(DateTime LockDateTimeUtc) : IEvent<UserAggregate>
{
    public UserAggregate Apply(UserAggregate aggregate)
    {
        return aggregate with { Locked = true };
    }
}

public sealed record VerificationResponse(bool Verified);

public interface IVerification {
    Task<VerificationResponse> Verify(MobileNumber mobileNumber, VerficationCode verficationCode);
}

public sealed record Token(string Value);

public sealed record VerifySignInResponse(bool IsVerified, Token? Token, string Message);

public sealed class VerifySignInCommandHandler : ICommandHandler<VerifySignInCommand, VerifySignInResponse>
{
    private readonly IEventStore<UserAggregate, UserPartitionKey, UserId> _eventStore;
    private readonly IVerification _verificationService;

    public VerifySignInCommandHandler(
        IEventStore<UserAggregate, UserPartitionKey, UserId> eventStore,
        IVerification verificationService)
    {
        _eventStore = eventStore;
        _verificationService = verificationService;
    }

    public async Task<VerifySignInResponse> HandleAsync(VerifySignInCommand command)
    {
        UserPartitionKey partitionKey = new(command.MobileNumber);
        UserId userId = new (command.MobileNumber);
        IAggregate aggregate = await _eventStore.GetAsync(partitionKey, userId);

        switch(aggregate)
        {
            case UserAggregate userAggregate:
                // Twilio Check
                var verificationResponse = await _verificationService.Verify(command.MobileNumber, command.VerificationCode);

                return (verificationResponse.Verified, userAggregate) switch {
                    (true, _) => await SuccessfullVerification(userAggregate, command.DeviceId, command.VerificationId),
                    (false, { FailedSignInAttempts: < 10 }) => await FailedVerification(userAggregate, command.DeviceId, command.VerificationId),
                    (false, _) => await LockAccount(userAggregate, command.DeviceId, command.VerificationId)
                };
            default:
                throw new InvalidOperationException();
        }
    }
 
    private async Task<VerifySignInResponse> SuccessfullVerification(UserAggregate userAggregate, DeviceId deviceId, VerificationId verificationId)
    {
        await _aggregateService.SaveAsync(userAggregate, new [] {
            new SuccessfulSignInEvent(deviceId, verificationId, DateTime.UtcNow),
        });

        return new VerifySignInResponse(false, new (Guid.NewGuid().ToString()), string.Empty);
    }

    private async Task<VerifySignInResponse> FailedVerification(UserAggregate userAggregate, DeviceId deviceId, VerificationId verificationId)
    {
        await _aggregateService.SaveAsync(userAggregate,new [] {
            new FailedSignInEvent(deviceId, verificationId, DateTime.UtcNow)
        });

        return new VerifySignInResponse(false, new (Guid.NewGuid().ToString()), "Invalid Verification Code");
    }

    private async Task<VerifySignInResponse> LockAccount(UserAggregate userAggregate, DeviceId deviceId, VerificationId verificationId)
    {
        var lockedDateTime = DateTime.UtcNow;
        await _aggregateService.SaveAsync(userAggregate,new List<IEvent<UserAggregate>> {
            new FailedSignInEvent(deviceId, verificationId, lockedDateTime),
            new UserLockedEvent(lockedDateTime)
        });

        return new VerifySignInResponse(false, new (Guid.NewGuid().ToString()), "To many attempts, account Locked");
    }
}

public sealed record UpdateMobileNumberCommand(CausationId CausationId, CorrelationId CorrelationId, MobileNumber MobileNumber)
    : Command (CausationId, CorrelationId), ICommand;;


public sealed class UpdateMobileNumberCommandHandler : ICommandHandler<UpdateMobileNumberCommand>
{
    private readonly IEventStore<UserAggregate, UserPartitionKey, UserId> _eventStore;

    public UpdateMobileNumberCommandHandler( IEventStore<UserAggregate, UserPartitionKey, UserId> eventStore)
    {
         _eventStore = eventStore;
    }

    public async Task HandleAsync(UpdateMobileNumberCommand command)
    {
        UserPartitionKey partitionKey = new(command.MobileNumber);
        UserId userId = new (command.MobileNumber);
        IAggregate aggregate = await _eventStore.GetAsync(partitionKey, userId);

        switch(aggregate)
        {
            case UserAggregate userAggregate:
                await _eventStore.SaveAsync(userAggregate, new List<IEvent<UserAggregate>> {
                    new MobileNumberChangedEvent(command.MobileNumber)
                });
                break;
            default:
                throw new InvalidOperationException();
        }
    }
}
